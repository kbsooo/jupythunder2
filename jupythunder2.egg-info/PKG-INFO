Metadata-Version: 2.4
Name: jupythunder2
Version: 0.1.0
Summary: CLI-native agentic notebook coding companion.
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.12.3
Requires-Dist: prompt-toolkit>=3.0.43
Requires-Dist: rich>=13.7.0
Requires-Dist: jupyter-client>=8.6.0
Requires-Dist: pydantic>=2.7.0
Requires-Dist: ollama>=0.1.8
Dynamic: license-file

# jupythunder2

CLI 환경에서 계획 · 코드 생성 · 실행 · 디버깅까지 하나의 흐름으로 이어주는 노트북 에이전트입니다. Codex CLI, Gemini CLI처럼 단일 명령(`jt2`)으로 실행하면 전용 REPL이 뜨고, 자연어 요청과 코드 실행을 반복할 수 있습니다.

## 주요 기능 (MVP)
- ASCII 스플래시를 포함한 전용 REPL UI (`prompt_toolkit` + `rich`)
- `/auto`, `/exec`, `/reset` 등 명령어 기반 워크플로우 제어
- Jupyter 커널과 직접 통신하여 코드 셀 실행 및 결과/이미지 수집
- 실행 오류에 대한 휴리스틱 디버그 요약과 수정 힌트
- 세션 로그(`runs/<timestamp>/events.jsonl`) 및 아티팩트 저장
- Ollama(codegemma:7b) 연동을 위한 LLM 오케스트레이터 골격

## 빠른 시작
```bash
uv venv
source .venv/bin/activate
uv pip install .

# 최초 실행 (LLM이 없어도 기본 명령어/커널 실행은 가능)
jt2
```

> ⚠️ Ollama가 실행 중이 아니면 LLM 기반 코드 제안은 비활성화되고, `/code` 명령으로 직접 코드를 실행할 수 있습니다.

## REPL 명령어
- `/help` : 사용 가능한 명령어 목록
- `/quit` : 세션 종료
- `/auto on|off` : 에이전트가 제안한 코드 자동 실행 토글
- `/reset` : Jupyter 커널 재시작
- `/cells` : 대기 중인 코드 셀 목록 확인
- `/exec <cell-id|all>` : 특정 셀 또는 전부 실행
- `/code <python>` : 즉시 실행할 파이썬 코드를 큐에 추가

## 설정
`~/.config/jt2/config.toml` 또는 프로젝트 루트의 `.jt2.toml`에서 기본 설정을 정의할 수 있습니다.

```toml
model = "codegemma:7b"
auto_execute = false
run_root = "runs"
max_execution_seconds = 60
history_limit = 10
```

`jt2 --config /path/to/config.toml` 형태로 다른 설정 파일을 지정할 수도 있습니다. `--dry-run` 옵션을 사용하면 설정만 출력하고 REPL에 진입하지 않습니다.

## 개발 노트
- 패키지 버전: Python 3.12
- 주요 라이브러리: Typer, prompt-toolkit, rich, jupyter-client, pydantic, ollama
- 테스트: `pytest`
- 린트/포맷: `ruff check .`, `ruff format .`

## 다음 단계 아이디어
1. LLM 응답 파서를 고도화하여 멀티 셀/워크플로우를 안정적으로 지원
2. `/plan`, `/workflow` 등 슬래시 명령 확장
3. `Textual` 기반 멀티 패널 TUI 실험
4. 코드 실행 결과(표/이미지)에 대한 요약 및 후속 액션 제안
5. LangChain 또는 자체 태스크 그래프를 활용한 멀티 스텝 리서치/실행
